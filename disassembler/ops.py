# Generated by glacierdsl - DO NOT EDIT.

from compiler.ops import OpCode


def _disassemble_struct_def(reader):
    print("STRUCT_DEF ({})".format(reader.index - 1))
    op = reader.expect_op()
    print("  type_id: {}".format(op))
    op = reader.expect_op()
    print("  member_id_len: {}".format(op))
    for i in range(0, op):
        op = reader.expect_op()
        print("    member_id_{}: {}".format(i, op))


def _disassemble_function_def(reader):
    print("FUNCTION_DEF ({})".format(reader.index - 1))
    op = reader.expect_op()
    print("  function_id: {}".format(op))
    op = reader.expect_op()
    print("  num_args: {}".format(op))


def _disassemble_set_var(reader):
    print("SET_VAR ({})".format(reader.index - 1))
    op = reader.expect_op()
    print("  variable_id: {}".format(op))


def _disassemble_get_var(reader):
    print("GET_VAR ({})".format(reader.index - 1))
    op = reader.expect_op()
    print("  variable_id: {}".format(op))


def _disassemble_call_func(reader):
    print("CALL_FUNC ({})".format(reader.index - 1))
    op = reader.expect_op()
    print("  function_id: {}".format(op))


def _disassemble_return(reader):
    print("RETURN ({})".format(reader.index - 1))


def _disassemble_return_val(reader):
    print("RETURN_VAL ({})".format(reader.index - 1))


def _disassemble_add(reader):
    print("ADD ({})".format(reader.index - 1))


def _disassemble_int(reader):
    print("INT ({})".format(reader.index - 1))
    op = reader.expect_op()
    print("  value: {}".format(op))


def _disassemble_string(reader):
    print("STRING ({})".format(reader.index - 1))
    op = reader.expect_op()
    print("  bytes_len: {}".format(op))
    for i in range(0, op):
        op = reader.expect_op()
        print("    bytes_{}: {}".format(i, chr(op)))


def _disassemble_subtract(reader):
    print("SUBTRACT ({})".format(reader.index - 1))


def _disassemble_multiply(reader):
    print("MULTIPLY ({})".format(reader.index - 1))


def _disassemble_divide(reader):
    print("DIVIDE ({})".format(reader.index - 1))


def _disassemble_function_jmp(reader):
    print("FUNCTION_JMP ({})".format(reader.index - 1))
    op = reader.expect_op()
    print("  function_id: {}".format(op))
    op = reader.expect_op()
    print("  offset: {}".format(op))


def _disassemble_header_end(reader):
    print("HEADER_END ({})".format(reader.index - 1))


def _disassemble_print(reader):
    print("PRINT ({})".format(reader.index - 1))


def _disassemble_eq(reader):
    print("EQ ({})".format(reader.index - 1))


def _disassemble_jump_if_true(reader):
    print("JUMP_IF_TRUE ({})".format(reader.index - 1))
    op = reader.expect_op()
    print("  offset: {}".format(op))


def _disassemble_jump_if_false(reader):
    print("JUMP_IF_FALSE ({})".format(reader.index - 1))
    op = reader.expect_op()
    print("  offset: {}".format(op))


def _disassemble_jump(reader):
    print("JUMP ({})".format(reader.index - 1))
    op = reader.expect_op()
    print("  offset: {}".format(op))


def _disassemble_struct(reader):
    print("STRUCT ({})".format(reader.index - 1))
    op = reader.expect_op()
    print("  struct_id: {}".format(op))


def _disassemble_get_struct_member(reader):
    print("GET_STRUCT_MEMBER ({})".format(reader.index - 1))
    op = reader.expect_op()
    print("  member_index: {}".format(op))


def _disassemble_set_struct_member(reader):
    print("SET_STRUCT_MEMBER ({})".format(reader.index - 1))
    op = reader.expect_op()
    print("  member_index: {}".format(op))


def _disassemble_lt(reader):
    print("LT ({})".format(reader.index - 1))


def _disassemble_vec(reader):
    print("VEC ({})".format(reader.index - 1))
    op = reader.expect_op()
    print("  size: {}".format(op))


def _disassemble_vec_access(reader):
    print("VEC_ACCESS ({})".format(reader.index - 1))


def _disassemble_map(reader):
    print("MAP ({})".format(reader.index - 1))
    op = reader.expect_op()
    print("  size: {}".format(op))


def _disassemble_map_access(reader):
    print("MAP_ACCESS ({})".format(reader.index - 1))


def _disassemble_vec_push(reader):
    print("VEC_PUSH ({})".format(reader.index - 1))


def _disassemble_vec_len(reader):
    print("VEC_LEN ({})".format(reader.index - 1))


def _disassemble_vec_pop(reader):
    print("VEC_POP ({})".format(reader.index - 1))


def _disassemble_map_insert(reader):
    print("MAP_INSERT ({})".format(reader.index - 1))


def _disassemble_read_str(reader):
    print("READ_STR ({})".format(reader.index - 1))


def disassemble_op(reader, op):
    if op == OpCode.STRUCT_DEF.value:
        _disassemble_struct_def(reader)
    if op == OpCode.FUNCTION_DEF.value:
        _disassemble_function_def(reader)
    if op == OpCode.SET_VAR.value:
        _disassemble_set_var(reader)
    if op == OpCode.GET_VAR.value:
        _disassemble_get_var(reader)
    if op == OpCode.CALL_FUNC.value:
        _disassemble_call_func(reader)
    if op == OpCode.RETURN.value:
        _disassemble_return(reader)
    if op == OpCode.RETURN_VAL.value:
        _disassemble_return_val(reader)
    if op == OpCode.ADD.value:
        _disassemble_add(reader)
    if op == OpCode.INT.value:
        _disassemble_int(reader)
    if op == OpCode.STRING.value:
        _disassemble_string(reader)
    if op == OpCode.SUBTRACT.value:
        _disassemble_subtract(reader)
    if op == OpCode.MULTIPLY.value:
        _disassemble_multiply(reader)
    if op == OpCode.DIVIDE.value:
        _disassemble_divide(reader)
    if op == OpCode.FUNCTION_JMP.value:
        _disassemble_function_jmp(reader)
    if op == OpCode.HEADER_END.value:
        _disassemble_header_end(reader)
    if op == OpCode.PRINT.value:
        _disassemble_print(reader)
    if op == OpCode.EQ.value:
        _disassemble_eq(reader)
    if op == OpCode.JUMP_IF_TRUE.value:
        _disassemble_jump_if_true(reader)
    if op == OpCode.JUMP_IF_FALSE.value:
        _disassemble_jump_if_false(reader)
    if op == OpCode.JUMP.value:
        _disassemble_jump(reader)
    if op == OpCode.STRUCT.value:
        _disassemble_struct(reader)
    if op == OpCode.GET_STRUCT_MEMBER.value:
        _disassemble_get_struct_member(reader)
    if op == OpCode.SET_STRUCT_MEMBER.value:
        _disassemble_set_struct_member(reader)
    if op == OpCode.LT.value:
        _disassemble_lt(reader)
    if op == OpCode.VEC.value:
        _disassemble_vec(reader)
    if op == OpCode.VEC_ACCESS.value:
        _disassemble_vec_access(reader)
    if op == OpCode.MAP.value:
        _disassemble_map(reader)
    if op == OpCode.MAP_ACCESS.value:
        _disassemble_map_access(reader)
    if op == OpCode.VEC_PUSH.value:
        _disassemble_vec_push(reader)
    if op == OpCode.VEC_LEN.value:
        _disassemble_vec_len(reader)
    if op == OpCode.VEC_POP.value:
        _disassemble_vec_pop(reader)
    if op == OpCode.MAP_INSERT.value:
        _disassemble_map_insert(reader)
    if op == OpCode.READ_STR.value:
        _disassemble_read_str(reader)
