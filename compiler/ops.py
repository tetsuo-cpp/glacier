# Generated by glacierdsl - DO NOT EDIT.

from compiler import bytecode


class GlacierOpStructDef:
    def __init__(self, type_id, member_id):
        self.type_id = type_id
        self.member_id = member_id

    def serialise(self, bc):
        args = list()
        args.append(self.type_id)
        args.append(len(self.member_id))
        args.extend(self.member_id)
        bc.write_op(bytecode.OpCode.STRUCT_DEF, args)


class GlacierOpFunctionDef:
    def __init__(self, function_id, num_args):
        self.function_id = function_id
        self.num_args = num_args

    def serialise(self, bc):
        args = list()
        args.append(self.function_id)
        args.append(self.num_args)
        bc.write_op(bytecode.OpCode.FUNCTION_DEF, args)


class GlacierOpSetVar:
    def __init__(self, variable_id):
        self.variable_id = variable_id

    def serialise(self, bc):
        args = list()
        args.append(self.variable_id)
        bc.write_op(bytecode.OpCode.SET_VAR, args)


class GlacierOpGetVar:
    def __init__(self, variable_id):
        self.variable_id = variable_id

    def serialise(self, bc):
        args = list()
        args.append(self.variable_id)
        bc.write_op(bytecode.OpCode.GET_VAR, args)


class GlacierOpCallFunc:
    def __init__(self, function_id):
        self.function_id = function_id

    def serialise(self, bc):
        args = list()
        args.append(self.function_id)
        bc.write_op(bytecode.OpCode.CALL_FUNC, args)


class GlacierOpReturn:
    def __init__(self):
        pass

    def serialise(self, bc):
        args = list()
        bc.write_op(bytecode.OpCode.RETURN, args)


class GlacierOpReturnVal:
    def __init__(self):
        pass

    def serialise(self, bc):
        args = list()
        bc.write_op(bytecode.OpCode.RETURN_VAL, args)


class GlacierOpAdd:
    def __init__(self):
        pass

    def serialise(self, bc):
        args = list()
        bc.write_op(bytecode.OpCode.ADD, args)


class GlacierOpInt:
    def __init__(self, value):
        self.value = value

    def serialise(self, bc):
        args = list()
        args.append(self.value)
        bc.write_op(bytecode.OpCode.INT, args)


class GlacierOpString:
    def __init__(self, bytes):
        self.bytes = bytes

    def serialise(self, bc):
        args = list()
        args.append(len(self.bytes))
        args.extend(self.bytes)
        bc.write_op(bytecode.OpCode.STRING, args)


class GlacierOpSubtract:
    def __init__(self):
        pass

    def serialise(self, bc):
        args = list()
        bc.write_op(bytecode.OpCode.SUBTRACT, args)


class GlacierOpMultiply:
    def __init__(self):
        pass

    def serialise(self, bc):
        args = list()
        bc.write_op(bytecode.OpCode.MULTIPLY, args)


class GlacierOpDivide:
    def __init__(self):
        pass

    def serialise(self, bc):
        args = list()
        bc.write_op(bytecode.OpCode.DIVIDE, args)


class GlacierOpFunctionJmp:
    def __init__(self, function_id, offset):
        self.function_id = function_id
        self.offset = offset

    def serialise(self, bc):
        args = list()
        args.append(self.function_id)
        args.append(self.offset)
        bc.write_op(bytecode.OpCode.FUNCTION_JMP, args)


class GlacierOpHeaderEnd:
    def __init__(self):
        pass

    def serialise(self, bc):
        args = list()
        bc.write_op(bytecode.OpCode.HEADER_END, args)


class GlacierOpPrint:
    def __init__(self):
        pass

    def serialise(self, bc):
        args = list()
        bc.write_op(bytecode.OpCode.PRINT, args)


class GlacierOpEq:
    def __init__(self):
        pass

    def serialise(self, bc):
        args = list()
        bc.write_op(bytecode.OpCode.EQ, args)


class GlacierOpJumpIfTrue:
    def __init__(self, offset):
        self.offset = offset

    def serialise(self, bc):
        args = list()
        args.append(self.offset)
        bc.write_op(bytecode.OpCode.JUMP_IF_TRUE, args)


class GlacierOpJumpIfFalse:
    def __init__(self, offset):
        self.offset = offset

    def serialise(self, bc):
        args = list()
        args.append(self.offset)
        bc.write_op(bytecode.OpCode.JUMP_IF_FALSE, args)


class GlacierOpJump:
    def __init__(self, offset):
        self.offset = offset

    def serialise(self, bc):
        args = list()
        args.append(self.offset)
        bc.write_op(bytecode.OpCode.JUMP, args)


class GlacierOpStruct:
    def __init__(self, struct_id):
        self.struct_id = struct_id

    def serialise(self, bc):
        args = list()
        args.append(self.struct_id)
        bc.write_op(bytecode.OpCode.STRUCT, args)


class GlacierOpGetStructMember:
    def __init__(self, member_index):
        self.member_index = member_index

    def serialise(self, bc):
        args = list()
        args.append(self.member_index)
        bc.write_op(bytecode.OpCode.GET_STRUCT_MEMBER, args)


class GlacierOpSetStructMember:
    def __init__(self, member_index):
        self.member_index = member_index

    def serialise(self, bc):
        args = list()
        args.append(self.member_index)
        bc.write_op(bytecode.OpCode.SET_STRUCT_MEMBER, args)


class GlacierOpLt:
    def __init__(self):
        pass

    def serialise(self, bc):
        args = list()
        bc.write_op(bytecode.OpCode.LT, args)


class GlacierOpVec:
    def __init__(self, size):
        self.size = size

    def serialise(self, bc):
        args = list()
        args.append(self.size)
        bc.write_op(bytecode.OpCode.VEC, args)


class GlacierOpVecAccess:
    def __init__(self):
        pass

    def serialise(self, bc):
        args = list()
        bc.write_op(bytecode.OpCode.VEC_ACCESS, args)


class GlacierOpMap:
    def __init__(self, size):
        self.size = size

    def serialise(self, bc):
        args = list()
        args.append(self.size)
        bc.write_op(bytecode.OpCode.MAP, args)


class GlacierOpMapAccess:
    def __init__(self):
        pass

    def serialise(self, bc):
        args = list()
        bc.write_op(bytecode.OpCode.MAP_ACCESS, args)


class GlacierOpVecPush:
    def __init__(self):
        pass

    def serialise(self, bc):
        args = list()
        bc.write_op(bytecode.OpCode.VEC_PUSH, args)


class GlacierOpVecLen:
    def __init__(self):
        pass

    def serialise(self, bc):
        args = list()
        bc.write_op(bytecode.OpCode.VEC_LEN, args)


class GlacierOpVecPop:
    def __init__(self):
        pass

    def serialise(self, bc):
        args = list()
        bc.write_op(bytecode.OpCode.VEC_POP, args)


class GlacierOpMapInsert:
    def __init__(self):
        pass

    def serialise(self, bc):
        args = list()
        bc.write_op(bytecode.OpCode.MAP_INSERT, args)
