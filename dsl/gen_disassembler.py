from dsl import ops

HEADER = "# Generated by glacierdsl - DO NOT EDIT.\n"
IMPORTS = """
from compiler.ops import OpCode
"""
INDENT = " " * 4
READ_OP = "op = reader.expect_op()\n"


def _gen_op(op):
    op_source = "def _disassemble_{}(reader):\n".format(op.name)
    op_source += INDENT + 'print("{} ({{}})".format(reader.index - 1))\n'.format(op.name.upper())
    for a in op.args:
        op_source += INDENT + READ_OP
        if isinstance(a, ops.GlacierVMArg):
            op_source += INDENT + 'print("  {}: {{}}".format(op))\n'.format(a.name)
        else:
            assert isinstance(a, ops.GlacierVMEnumeratedArg)
            op_source += INDENT + 'print("  {}_len: {{}}".format(op))\n'.format(a.name)
            op_source += INDENT + "for i in range(0, op):\n"
            op_source += INDENT * 2 + READ_OP
            if a.size == ops.GlacierVMArgType.CHAR:
                op_source += INDENT * 2 + 'print("    {}_{{}}: {{}}".format(i, chr(op)))\n'.format(
                    a.name
                )
            else:
                op_source += INDENT * 2 + 'print("    {}_{{}}: {{}}".format(i, op))\n'.format(
                    a.name
                )
    op_source += "\n"
    return op_source


def gen_disassembler(op_list):
    source = HEADER + IMPORTS
    for op in op_list:
        source += _gen_op(op)
    source += "def disassemble_op(reader, op):\n"
    for op in op_list:
        source += INDENT + "if op == OpCode.{}.value:\n".format(op.name.upper())
        source += INDENT * 2 + "_disassemble_{}(reader)\n".format(op.name)
    return source
